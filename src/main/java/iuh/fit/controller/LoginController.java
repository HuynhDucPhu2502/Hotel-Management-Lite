package iuh.fit.controller;

import com.dlsc.gemsfx.DialogPane;
import iuh.fit.dao.AccountDAO;
import iuh.fit.models.Account;
import iuh.fit.models.enums.AccountStatus;
import iuh.fit.security.PasswordHashing;
import iuh.fit.utils.ErrorMessages;
import javafx.animation.Interpolator;
import javafx.animation.ParallelTransition;
import javafx.animation.TranslateTransition;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.File;
import java.sql.SQLException;
import java.util.Objects;

public class LoginController {


    @FXML private DialogPane dialogPane;

    // --- C√°c v√πng ch·ª©a giao di·ªán (Pane) ---
    @FXML private GridPane loginGrid;           // Giao di·ªán ƒëƒÉng nh·∫≠p
    @FXML private GridPane restoreDataGrid;     // Giao di·ªán ph·ª•c h·ªìi d·ªØ li·ªáu (backup/restore)

    // --- C√°c tr∆∞·ªùng nh·∫≠p li·ªáu ---
    @FXML private TextField userNameField;             // Tr∆∞·ªùng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p
    @FXML private PasswordField hiddenPasswordField;   // Tr∆∞·ªùng nh·∫≠p m·∫≠t kh·∫©u (·∫©n)
    @FXML private TextField visiblePasswordField;      // Tr∆∞·ªùng nh·∫≠p m·∫≠t kh·∫©u (hi·ªán - ki·ªÉu text)

    // --- Th√†nh ph·∫ßn ƒëi·ªÅu khi·ªÉn giao di·ªán ---
    @FXML private Button signInButton;                 // N√∫t th·ª±c hi·ªán ƒëƒÉng nh·∫≠p
    @FXML private ImageView showPassButton;            // N√∫t chuy·ªÉn ƒë·ªïi hi·ªÉn th·ªã m·∫≠t kh·∫©u
    @FXML private Text errorMessage;                   // Th√¥ng b√°o l·ªói khi ƒëƒÉng nh·∫≠p

    private Stage mainStage;


    // --- Ch∆∞a th·∫•y x√†i
    @FXML private PasswordField passRestorePasswordField;
    @FXML private TextField passRestoreTextField;
    @FXML private TextField filePathRestoreTextField;
    @FXML private Text passTitleText;
    @FXML private Text filepathTitleText;

    @FXML private Button showPassRestoreButton;
    @FXML private Button filePathRestoreButton;

    @FXML private Button refreshPassRestoreButton;
    @FXML private Button cancelRestoreButton;
    @FXML private Button confirmPassRestoreButton;



    @FXML
    public void initialize(Stage mainStage) {
        this.mainStage = mainStage;

        dialogPane.toFront();
        hiddenPasswordField.textProperty().bindBidirectional(visiblePasswordField.textProperty());
        passRestorePasswordField.textProperty().bindBidirectional(passRestoreTextField.textProperty());
        signInButton.setOnMouseClicked(event -> signIn(mainStage));
    }

// =====================================================================================
// ‚èπ Chuy·ªÉn ƒë·ªïi giao di·ªán gi·ªØa c√°c m√†n h√¨nh (Login ‚áÑ Restore Data)
// ‚úî ƒê√£ c·∫£i ti·∫øn logic chuy·ªÉn ƒë·ªïi so v·ªõi project ban ƒë·∫ßu
// =====================================================================================
    private boolean isDefaultIcon = true;

    // Hi·ªÉn th·ªã m√†n h√¨nh t·ª´ Login Pane l√™n Restore Data Pane
    @FXML
    public void fromLoginGridToRestoreDataGrid() {
        switchGridPane(loginGrid, restoreDataGrid, true);
    }

    // Hi·ªÉn th·ªã m√†n h√¨nh t·ª´ Restore Data Pane v·ªÅ Login Pane
    @FXML
    void fromRestoreDataGridToLoginGrid() {
        switchGridPane(restoreDataGrid, loginGrid, false);
    }

    // Hi·ªáu ·ª©ng chuy·ªÉn l√™n ho·∫∑c xu·ªëng
    public void switchGridPane(GridPane gridPaneOut, GridPane gridPaneIn, boolean slideUp) {
        gridPaneIn.setVisible(true);

        double height = gridPaneOut.getHeight();
        double fromYOut = slideUp ? 0 : 0;
        double toYOut = slideUp ? height : -height;
        double fromYIn = slideUp ? -height : height;
        double toYIn = 0;

        TranslateTransition slideOut = new TranslateTransition(Duration.millis(500), gridPaneOut);
        slideOut.setFromY(fromYOut);
        slideOut.setToY(toYOut);
        slideOut.setInterpolator(Interpolator.EASE_BOTH);

        TranslateTransition slideIn = new TranslateTransition(Duration.millis(500), gridPaneIn);
        slideIn.setFromY(fromYIn);
        slideIn.setToY(toYIn);
        slideIn.setInterpolator(Interpolator.EASE_BOTH);

        ParallelTransition parallelTransition = new ParallelTransition(slideOut, slideIn);
        parallelTransition.setOnFinished(event -> {
            gridPaneOut.setVisible(false);
            gridPaneOut.setTranslateY(0);
        });
        parallelTransition.play();
    }

// =====================================================================================
// üîê C√°c h√†m x·ª≠ l√Ω hi·ªÉn th·ªã / ·∫©n m·∫≠t kh·∫©u t·∫°i giao di·ªán ƒëƒÉng nh·∫≠p (Login Pane)
// =====================================================================================
    @FXML
    private void changePasswordViewState() {
        if (isDefaultIcon) {
            Image newIcon = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/iuh/fit/icons/login_panel_icons/ic_hidden_password.png")));
            showPassButton.setImage(newIcon);
        } else {
            Image defaultIcon = new Image(Objects.requireNonNull(getClass().getResourceAsStream("/iuh/fit/icons/login_panel_icons/ic_show_password.png")));
            showPassButton.setImage(defaultIcon);
        }

        PasswordVisibility();

        isDefaultIcon = !isDefaultIcon;
    }

    private void PasswordVisibility() {
        if (hiddenPasswordField.isVisible()) {
            hiddenPasswordField.setVisible(false);
            hiddenPasswordField.setManaged(false);
            visiblePasswordField.setVisible(true);
            visiblePasswordField.setManaged(true);
        } else {
            visiblePasswordField.setVisible(false);
            visiblePasswordField.setManaged(false);
            hiddenPasswordField.setVisible(true);
            hiddenPasswordField.setManaged(true);
        }
    }

// =====================================================================================
// üîë C√°c h√†m x·ª≠ l√Ω ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p (Login)
// =====================================================================================
    private void signIn(Stage mainStage) {
        String userName = userNameField.getText();
        String password = hiddenPasswordField.getText();

        if (userName.isEmpty()) {
            errorMessage.setText(ErrorMessages.LOGIN_INVALID_USERNAME);
            return;
        }

        if (password.isEmpty()) {
            errorMessage.setText(ErrorMessages.LOGIN_INVALID_PASSWORD);
            return;
        }


        Account account = AccountDAO.getLogin(userName, PasswordHashing.hashPassword(password));
        if (account == null) {
            errorMessage.setText(ErrorMessages.LOGIN_INVALID_ACCOUNT);
            return;
        }


        if (account.getStatus().equals(AccountStatus.LOCKED)) {
            dialogPane.showInformation(
                    "Th√¥ng b√°o",
                    "T√†i kho·∫£n b·ªã kh√≥a ho·∫∑c kh√¥ng c√≥ hi·ªáu l·ª±c.\n" +
                            "Vui l√≤ng b√°o ng∆∞·ªùi qu·∫£n l√Ω kh√°ch s·∫°n ƒë·ªÉ bi·∫øt th√™m th√¥ng tin."
            );
            return;
        }

        loadMainUI(account, mainStage);
    }

// =====================================================================================
// Chuy·ªÉn sang giao di·ªán ch√≠nh (ƒëƒÉng nh·∫≠p th√†nh c√¥ng)
// =====================================================================================
    private void loadMainUI(Account account, Stage mainStage) {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/iuh/fit/view/ui/MainUI.fxml"));
            AnchorPane mainPanel = fxmlLoader.load();

            MainController mainController = fxmlLoader.getController();
            mainController.initialize(account, mainStage);

            Scene scene = new Scene(mainPanel);

            mainStage.setWidth(1200);
            mainStage.setHeight(680);
            mainStage.setScene(scene);
            mainStage.setResizable(true);
            mainStage.setMaximized(true);

            mainStage.centerOnScreen();

            mainStage.show();
        } catch (Exception e) {
            errorMessage.setText(e.getMessage());
        }
    }






//    private void registerEventEnterKey() {
//        userNameField.setOnKeyPressed(e -> {
//            if (e.getCode() == KeyCode.ENTER) {
//                try {
//                    signIn(mainStage);
//                } catch (SQLException ignored) {
//
//                }
//            }
//        });
//
//        hiddenPasswordField.setOnKeyPressed(e -> {
//            if (e.getCode() == KeyCode.ENTER) {
//                try {
//                    signIn(mainStage);
//                } catch (SQLException ignored) {
//
//                }
//            }
//        });
//
//        visiblePasswordField.setOnKeyPressed(e -> {
//            if (e.getCode() == KeyCode.ENTER) {
//                try {
//                    signIn(mainStage);
//                } catch (SQLException ignored) {
//
//                }
//            }
//        });
//    }





    @FXML
    void confirmPassRestore() {
//        final String key = "7523C62ABDB7628C5A9DAD8F97D8D8C5C040EDE36535E531A8A3748B6CAE7E00";
//        final String resourcePath = "/iuh/fit/security/E201065D0554652615C320C00A1D5BC8EDCA469D72C2790E24152D0C1E2B6189.properties";
//
//        String userPassInput = passRestorePasswordField.getText();
//
//        // Ki·ªÉm tra m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p
//        if (userPassInput == null || userPassInput.isBlank()) {
//            showMessage(
//                    Alert.AlertType.INFORMATION,
//                    "Th√¥ng b√°o",
//                    "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u",
//                    "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n"
//            ).show();
//            return;
//        }
//
//        // Ki·ªÉm tra file v√† x√°c th·ª±c m·∫≠t kh·∫©u
//        try {
//            String storedHash = PropertiesFile.readFileFromResources(resourcePath, key);
//            if (PasswordHashing.hashPassword(userPassInput).equalsIgnoreCase(storedHash)) {
//                switchFromPassPanelToRestorePanel(false, true);
//            } else {
//                showMessage(
//                        Alert.AlertType.INFORMATION,
//                        "Sai m·∫≠t kh·∫©u",
//                        "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng, vui l√≤ng th·ª≠ l·∫°i.",
//                        "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n"
//                ).show();
//            }
//        } catch (Exception e) {
//            showMessage(
//                    Alert.AlertType.ERROR,
//                    "L·ªói",
//                    "ƒê√£ x·∫£y ra l·ªói khi ƒë·ªçc file t·ª´ resources.",
//                    "Vui l√≤ng ki·ªÉm tra l·∫°i file v√† th·ª≠ l·∫°i."
//            ).show();
//        }
    }



    @FXML
    void refreshPassRestore() {
        passRestorePasswordField.setText("");
        passRestorePasswordField.requestFocus();
    }

    @FXML
    void showPassRestore() {
        changePasswordViewState();
        if(passRestorePasswordField.isVisible()){
            passRestoreTextField.setVisible(true);
            passRestoreTextField.setManaged(true);
            passRestorePasswordField.setVisible(false);
            passRestorePasswordField.setManaged(false);
        }else{
            passRestoreTextField.setVisible(false);
            passRestoreTextField.setManaged(false);
            passRestorePasswordField.setVisible(true);
            passRestorePasswordField.setManaged(true);
        }
    }

    @FXML
    void confirmRestoreData() throws SQLException {
//        String filePath = filePathRestoreTextField.getText();
//        if (filePath == null || filePath.isBlank()) {
//            showMessage(
//                    Alert.AlertType.INFORMATION,
//                    "Th√¥ng b√°o",
//                    "H√£y ch·ªçn t·ªáp d·ªØ li·ªáu ƒë·ªÉ kh√¥i ph·ª•c.",
//                    "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n."
//            ).show();
//            return;
//        }
//
//        String[] parts = filePath.split("\\\\");
//        String fileName = parts[parts.length - 1];
//        if (!fileName.contains(".bak")) {
//            showMessage(
//                    Alert.AlertType.INFORMATION,
//                    "Th√¥ng b√°o",
//                    "Sai lo·∫°i t·ªáp, t·ªáp ph·∫£i c√≥ ƒëu√¥i .bak.",
//                    "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n."
//            ).show();
//            return;
//        }
//
//        String databaseName = "HotelDatabase";
//        if (RestoreDatabase.isDatabaseExist(databaseName)) {
//            Optional<ButtonType> optional = showMessage(
//                    Alert.AlertType.CONFIRMATION,
//                    "Th√¥ng b√°o",
//                    "D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
//                    "Nh·∫•n OK ƒë·ªÉ ghi ƒë√®, Cancel ƒë·ªÉ h·ªßy."
//            ).showAndWait();
//
//            if (optional.isPresent() && optional.get().equals(ButtonType.OK)) {
//                try {
//                    RestoreDatabase.restoreFullWhenNoDB(filePath);
//                    showMessage(
//                            Alert.AlertType.INFORMATION,
//                            "Ph·ª•c h·ªìi d·ªØ li·ªáu th√†nh c√¥ng",
//                            "D·ªØ li·ªáu ƒë√£ ph·ª•c h·ªìi th√†nh c√¥ng",
//                            "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n"
//                    ).show();
//                    backToLoginPanel();
//                } catch (Exception e) {
//                    showMessage(
//                            Alert.AlertType.ERROR,
//                            "Kh√¥i ph·ª•c th·∫•t b·∫°i",
//                            "T·ªáp d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. " +
//                                    "H√£y ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n, ch·ªâ c√≥ th·ªÉ d·ª•ng t·ªáp d·ªØ li·ªáu to√†n b·ªô (FULL) v√† l√† d·ªØ li·ªáu c·ªßa ·ª©ng d·ª•ng",
//                            "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n."
//                    ).show();
//                }
//            }
//        } else {
//            try {
//                RestoreDatabase.restoreFullWhenNoDB(filePath);
//                showMessage(
//                        Alert.AlertType.INFORMATION,
//                        "Ph·ª•c h·ªìi d·ªØ li·ªáu th√†nh c√¥ng",
//                        "D·ªØ li·ªáu ƒë√£ ph·ª•c h·ªìi th√†nh c√¥ng",
//                        "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n"
//                ).show();
//                backToLoginPanel();
//            } catch (Exception e) {
//                showMessage(
//                        Alert.AlertType.ERROR,
//                        "Kh√¥i ph·ª•c th·∫•t b·∫°i",
//                        "T·ªáp d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. " +
//                                "H√£y ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n, ch·ªâ c√≥ th·ªÉ d·ª•ng t·ªáp d·ªØ li·ªáu to√†n b·ªô (FULL) v√† l√† d·ªØ li·ªáu c·ªßa ·ª©ng d·ª•ng",
//                        "Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n."
//                ).show();
//            }
//        }
    }


    @FXML
    void cancelRestore() {
//        hideComponentsFromRestoreDataGrid();
        filePathRestoreTextField.setText("");
    }

    @FXML
    void getFilePath() {
        FileChooser fileChooser = new FileChooser();
        File f = fileChooser.showOpenDialog(null);

        if(f == null) return;
        filePathRestoreTextField.setText(f.getAbsolutePath());
    }

    private Alert showMessage(Alert.AlertType alertType, String title, String header, String content){
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        return alert;
    }

}
